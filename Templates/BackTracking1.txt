private static void dfs(int startIndex, List<T> path, List<List<T>> res) {
    if (isLeaf(startIndex)) {
        res.add(new ArrayList<>(path)); // add a copy of the path to the result
        return;
    }
    for (T edge : getEdges(startIndex, [...additional states])) {
        path.add(choice);
        if (...additionl statees) update(...additional states)
        dfs(startIndex + edge.length(), res);
        path.remove(path.size() - 1);
        // revert(...additional states) if necessary e.g. permutations
    }
}

